import logging
import requests
import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.session.aiohttp import AiohttpSession
from datetime import datetime, timedelta
from collections import defaultdict

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
BOT_TOKEN = "7691437662:AAFfjvNMBBf9s91RcJ3XPcW3mZDYtac72Us"
BASE_URL = "http://127.0.0.1:8000"

# –°—Ç–∞–Ω FSM
class RegisterUser(StatesGroup):
    first_name = State()
    last_name = State()
    email = State()
    phone = State()

class InspectionProcess(StatesGroup):
    waiting_photo = State()

class EndRentalProcess(StatesGroup):
    waiting_photo = State()

# –ö–Ω–æ–ø–∫–∏
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöó –ú–æ—è –æ—Ä–µ–Ω–¥–∞")],
            [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ä–µ–Ω–¥")],
            [KeyboardButton(text="üöò –î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—à–∏–Ω–∏")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")]
        ],
        resize_keyboard=True
    )

def get_back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN, session=AiohttpSession())
dp = Dispatcher()
router = Router()
dp.include_router(router)
logging.basicConfig(level=logging.INFO)

# /start
@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    response = requests.get(f"{BASE_URL}/get_users/")
    if response.status_code == 200:
        users = response.json()
        existing_user = next((user for user in users if user.get("tg_id") == tg_id), None)
        if existing_user:
            await message.answer(f"üëã –ü—Ä–∏–≤—ñ—Ç, {existing_user['first_name']}!", reply_markup=get_main_menu())
        else:
            await message.answer("üìù –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
            await state.set_state(RegisterUser.first_name)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
@router.message(RegisterUser.first_name)
async def get_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ:")
    await state.set_state(RegisterUser.last_name)

@router.message(RegisterUser.last_name)
async def get_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å email:")
    await state.set_state(RegisterUser.email)

@router.message(RegisterUser.email)
async def get_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(RegisterUser.phone)

@router.message(RegisterUser.phone)
async def get_phone_and_register(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    user_payload = {
        "first_name": data["first_name"],
        "last_name": data["last_name"],
        "email": data["email"],
        "phone": data["phone"],
        "tg_id": message.from_user.id
    }
    response = requests.post(f"{BASE_URL}/create_user/", json=user_payload)
    if response.status_code == 200:
        await message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", reply_markup=get_main_menu())
    else:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:\n{response.text}")
    await state.clear()
# –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É
@router.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É")
async def finish_rental(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    rentals_resp = requests.get(f"{BASE_URL}/get_rentals_by_tg_id/{tg_id}")
    rentals = rentals_resp.json()
    now = datetime.now()
    current_rental = next((r for r in rentals if datetime.fromisoformat(r["rental_end"]) > now and not r["is_ended"]), None)
    rental_id = current_rental["rental_id"]
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —É—à–∫–æ–¥–∂–µ–Ω—å
    result_text = await compare_damages(rental_id)
    await message.answer(result_text)
    await my_rental(message)

'''@router.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É")
async def start_end_rental(message: Message, state: FSMContext):
    await state.set_state(EndRentalProcess.waiting_photo)
    await state.update_data(photo_index=1, total_photos=8)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ 1 –∑ 8 (–ø—ñ—Å–ª—è –æ—Ä–µ–Ω–¥–∏):", reply_markup=ReplyKeyboardRemove())
    

# –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è –æ—Ä–µ–Ω–¥–∏
@router.message(EndRentalProcess.waiting_photo, F.photo)
async def handle_end_rental_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_index = data["photo_index"]
    total_photos = data["total_photos"]

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_bytes = await bot.download_file(file.file_path)

    tg_id = message.from_user.id
    rentals_resp = requests.get(f"{BASE_URL}/get_rentals_by_tg_id/{tg_id}")
    rentals = rentals_resp.json()
    now = datetime.now()
    current_rental = next((r for r in rentals if datetime.fromisoformat(r["rental_end"]) > now and not r["is_ended"]), None)
    rental_id = current_rental["rental_id"]
    user_id = current_rental["user_id"]

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    files = {"image": ("photo.jpg", file_bytes.getvalue(), "image/jpeg")}
    data = {
        "rental_id": rental_id,
        "user_id": user_id,
        "photo_type": f"after_{photo_index}"
    }
    resp = requests.post(f"{BASE_URL}/process_photo/", data=data, files=files)

    if photo_index < total_photos:
        await state.update_data(photo_index=photo_index + 1)
        await message.answer(f"üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ {photo_index + 1} –∑ 8:")
    else:
        await state.clear()

        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—à–∫–æ–¥–∂–µ–Ω—å –ø—ñ—Å–ª—è —Ç–∞ –¥–æ –æ—Ä–µ–Ω–¥–∏
        message_text = await compare_damages(rental_id)

        await message.answer(message_text)
        await my_rental(message)'''

# –ú–æ—è –æ—Ä–µ–Ω–¥–∞
@router.message(F.text == "üöó –ú–æ—è –æ—Ä–µ–Ω–¥–∞")
async def my_rental(message: Message):
    tg_id = message.from_user.id
    try:
        response = requests.get(f"{BASE_URL}/get_rentals_by_tg_id/{tg_id}")
        rentals = response.json()
        if not rentals:
            return await message.answer("üöó –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –æ—Ä–µ–Ω–¥–∏.", reply_markup=get_back_menu())
        now = datetime.now()
        active_rental = next((r for r in rentals if datetime.fromisoformat(r["rental_end"]) > now and not r["is_ended"]), None)
        if not active_rental:
            return await message.answer("üöó –£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–æ—ó –æ—Ä–µ–Ω–¥–∏.", reply_markup=get_back_menu())

        rental_start = datetime.fromisoformat(active_rental["rental_start"])
        rental_end = datetime.fromisoformat(active_rental["rental_end"])
        damage_check = active_rental["damage_check"]
        is_ended = active_rental["is_ended"]
        rental_id = active_rental["rental_id"]
        car_id = active_rental["car_id"]

        # –ê–≤—Ç–æ
        car_resp = requests.get(f"{BASE_URL}/get_car/{car_id}")
        car_info = f"üöò –ê–≤—Ç–æ ID {car_id}"
        if car_resp.status_code == 200:
            car = car_resp.json()
            car_info = f"üöò {car['make']} {car['model']} ({car['year']})\n–ù–æ–º–µ—Ä: {car['license_plate']}"

        # –ö–Ω–æ–ø–∫–∞
        button_text = "Test"
        now_plus_day = now + timedelta(days=1)
        hours_to_end = (rental_end - now).total_seconds() / 3600

        if rental_start.date() in [now.date(), now_plus_day.date()] and not damage_check and not is_ended:
            button_text = "üì∏ –û–≥–ª—è–¥ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"
        elif 0 < hours_to_end <= 3 and not is_ended and not active_rental.get("has_new_damage", False):
            button_text = "üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É"
        elif active_rental.get("has_new_damage", True):
            button_text = "üõë –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è"
        else :
            button_text = "–û—Ä–µ–Ω–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –ø–ª–∞–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ"


        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=button_text)],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"{car_info}\n\nüìÖ –ü–µ—Ä—ñ–æ–¥ –æ—Ä–µ–Ω–¥–∏:\n–∑ {rental_start.strftime('%Y-%m-%d %H:%M')} "
            f"–¥–æ {rental_end.strftime('%Y-%m-%d %H:%M')}",
            reply_markup=keyboard
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}", reply_markup=get_back_menu())
@router.message(F.text == "üõë –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è")
async def contact_support(message: Message):
    await message.answer("üîß –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\nüìû +380501234567\nüìß support@rentacar.ua")

# –û–≥–ª—è–¥ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
@router.message(F.text == "üì∏ –û–≥–ª—è–¥ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è")
async def start_inspection(message: Message, state: FSMContext):
    await state.set_state(InspectionProcess.waiting_photo)
    await state.update_data(photo_index=1, total_photos=8)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ 1 –∑ 8 (–æ–≥–ª—è–¥ –∞–≤—Ç–æ):", reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
@router.message(InspectionProcess.waiting_photo, F.photo)
async def handle_inspection_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_index = data["photo_index"]
    total_photos = data["total_photos"]

    # –§–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_bytes = await bot.download_file(file.file_path)

    # Rental
    tg_id = message.from_user.id
    rentals_resp = requests.get(f"{BASE_URL}/get_rentals_by_tg_id/{tg_id}")
    rentals = rentals_resp.json()
    now = datetime.now()
    current_rental = next(
    (r for r in rentals if datetime.fromisoformat(r["rental_end"]) > now and not r["is_ended"]),
    None
)
    rental_id = current_rental["rental_id"]
    user_id = current_rental["user_id"]
    
    damage_check = current_rental["damage_check"]
    photo_type = f"before_{photo_index}" if not damage_check else f"after_{photo_index}"
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è
    files = {"image": ("photo.jpg", file_bytes.getvalue(), "image/jpeg")}
    data = {
        "rental_id": rental_id,
        "user_id": user_id,
        "photo_type": photo_type
    }
    resp = requests.post(f"{BASE_URL}/process_photo/", data=data, files=files)

    if photo_index < total_photos:
        await state.update_data(photo_index=photo_index + 1)
        await message.answer(f"üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ {photo_index + 1} –∑ 8:")
    else:
        await state.clear()
        # ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ—Ä–µ–Ω–¥–∏
        requests.patch(f"{BASE_URL}/update_rental_damage_check/{rental_id}")
        await message.answer("‚úÖ –û–≥–ª—è–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å—ñ 8 —Ñ–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.")
        await my_rental(message)

# –Ü—Å—Ç–æ—Ä—ñ—è
@router.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ä–µ–Ω–¥")
async def rental_history(message: Message):
    tg_id = message.from_user.id
    try:
        response = requests.get(f"{BASE_URL}/get_rentals_by_tg_id/{tg_id}")
        if response.status_code != 200:
            return await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ—Ä–µ–Ω–¥.", reply_markup=get_back_menu())

        rentals = response.json()
        ended_rentals = [r for r in rentals if r.get("is_ended", False)]

        if not ended_rentals:
            return await message.answer("üìú –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –æ—Ä–µ–Ω–¥.", reply_markup=get_back_menu())

        msg = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –æ—Ä–µ–Ω–¥:\n\n"
        for rental in ended_rentals:
            rental_start = datetime.fromisoformat(rental["rental_start"])
            rental_end = datetime.fromisoformat(rental["rental_end"])
            car_resp = requests.get(f"{BASE_URL}/get_car/{rental['car_id']}")
            if car_resp.status_code == 200:
                car = car_resp.json()
                msg += f"üöò {car['make']} {car['model']} ({car['year']}) ‚Äî {car['license_plate']}\n"
            else:
                msg += "üöò –ê–≤—Ç–æ: –Ω–µ–≤—ñ–¥–æ–º–µ\n"
            msg += f"üìÖ –∑ {rental_start.strftime('%Y-%m-%d %H:%M')} –¥–æ {rental_end.strftime('%Y-%m-%d %H:%M')}\n\n"

        await message.answer(msg, reply_markup=get_back_menu())

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {str(e)}", reply_markup=get_back_menu())


# –î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—à–∏–Ω–∏
@router.message(F.text == "üöò –î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—à–∏–Ω–∏")
async def available_cars(message: Message):
    response = requests.get(f"{BASE_URL}/get_cars/")
    cars = response.json()
    if cars:
        msg = "üöò –î–æ—Å—Ç—É–ø–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ:\n\n"
        for car in cars:
            status_note = " (–≤ –æ—Ä–µ–Ω–¥—ñ)" if car["status"] == "in_rent" else ""
            msg += f"{car['make']} {car['model']} ({car['year']}) ‚Äî {car['license_plate']}{status_note}\n"
        await message.answer(msg, reply_markup=get_back_menu())
    else:
        await message.answer("‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–≤—Ç–æ.", reply_markup=get_back_menu())

# –ö–æ–Ω—Ç–∞–∫—Ç–∏
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def contacts(message: Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +380501234567\nüìß Email: support@rentacar.ua", reply_markup=get_back_menu())

# –ù–∞–∑–∞–¥
@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def back_to_main(message: Message):
    await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_menu())
# –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—à–∫–æ–¥–∂–µ–Ω—å –ø—ñ—Å–ª—è —Ç–∞ –¥–æ –æ—Ä–µ–Ω–¥–∏
async def compare_damages(rental_id: int):
    new_damages = []

    for i in range(1, 9):
        before_resp = requests.get(f"{BASE_URL}/get_damages_by_rental/{rental_id}/before_{i}")
        after_resp = requests.get(f"{BASE_URL}/get_damages_by_rental/{rental_id}/after_{i}")

        if before_resp.status_code != 200 or after_resp.status_code != 200:
            continue

        damage_before = [d for d in before_resp.json() if d['confidence'] >= 0.5]
        damage_after = [d for d in after_resp.json() if d['confidence'] >= 0.5]

        before_boxes = [(d['damage_type'], eval(d['box'])) for d in damage_before]
        after_boxes = [(d['damage_type'], eval(d['box'])) for d in damage_after]

        for damage_type, after_box in after_boxes:
            matches = [
                iou(after_box, before_box) > 0.5
                for before_type, before_box in before_boxes
                if before_type == damage_type
            ]
            if not any(matches):
                new_damages.append(damage_type)

    if new_damages:
        requests.patch(f"{BASE_URL}/flag_rental_damage/{rental_id}")
        damage_summary = "\n".join(f"- {d}" for d in set(new_damages))
        return f"üö® –í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–≤—ñ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è:\n{damage_summary}"
    else:
        requests.patch(f"{BASE_URL}/update_rental_end/{rental_id}")
        return "‚úÖ –û—Ä–µ–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –Ω–æ–≤–∏—Ö –ø–æ—à–∫–æ–¥–∂–µ–Ω—å."



def iou(box1, box2):
    """Intersection over Union - –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö –±–æ–∫—Å–æ–≤"""
    x1 = max(box1[0], box2[0])
    y1 = max(box1[1], box2[1])
    x2 = min(box1[2], box2[2])
    y2 = min(box1[3], box2[3])

    inter_area = max(0, x2 - x1) * max(0, y2 - y1)

    area1 = (box1[2] - box1[0]) * (box1[3] - box1[1])
    area2 = (box2[2] - box2[0]) * (box2[3] - box2[1])

    union_area = area1 + area2 - inter_area

    if union_area == 0:
        return 0
    return inter_area / union_area


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
